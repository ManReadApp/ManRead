[package]
name = "manread"
edition.workspace = true
rust-version.workspace = true
version.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
egui = { version = "0.27.1" }
eframe = { version = "0.27.1", default-features = false, features = [
    "default_fonts", # Embed the default egui fonts.
    "glow", # Use the glow rendering backend. Alternative: "wgpu".
    "persistence", # Enable restoring app state when restarting the app.
] }
ethread = { path = "../../ethread" }

log = {workspace = true}
serde = { workspace = true, features = ["derive"] }
api_structure = { workspace = true }
image = { workspace = true, features = ["jpeg", "gif", "qoi"] }

#fetching
serde_json = {workspace = true}
url = {workspace = true}
reqwest = {workspace = true, features = ["json", "stream", "multipart"] }
base64 = {workspace = true}
poll-promise = "0.3"
keyring = "2.3"
egui_extras = { version = "0.27.1", features = ["all_loaders", "datepicker"] }
rfd = "0.14"

# auth
regex = {workspace = true}
identicon-rs = {workspace = true}

#
chrono = {workspace = true}
futures-util = { workspace = true }

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
fern = { workspace = true, features = ["colored"] }
humantime = {workspace = true}
tokio = {workspace = true, features = ["rt", "rt-multi-thread", "sync", "macros"] }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen-futures = "0.4"
wasm-bindgen = "0.2"
js-sys = "0.3"
web-sys = { version = "0.3", features = ['console'] }
tokio = { workspace = true, features = ["sync"] }


[features]
default = ["dev"]
dev = []

# If you want to use the bleeding edge version of egui and eframe:
# egui = { git = "https://github.com/emilk/egui", branch = "master" }
# eframe = { git = "https://github.com/emilk/egui", branch = "master" }


# If you fork https://github.com/emilk/egui you can test with:
#egui = { path = "../egui/crates/egui" }
#egui_extras = { path = "../egui/crates/egui_extras" }

# eframe = { path = "../egui/crates/eframe" }
